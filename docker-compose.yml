services:
  db:
    image: postgres:15
    container_name: db-aviasales
    environment:
      - POSTGRES_DB=study
      - POSTGRES_USER=study
      - POSTGRES_PASSWORD=study
    ports:
      - 5433:5432
    volumes:
      - db-aviasales-data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U study -d study" ]
      interval: 5s
      timeout: 1s
      retries: 10
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_KRAFT_MODE=true
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=DOCKER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,DOCKER://0.0.0.0:29092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,DOCKER://kafka:29092
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=DOCKER://kafka:29092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka


  searcher_service:
    container_name: searcher_service
    build:
      context: ./searcher_service/
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_HOST=db-aviasales
      - DATABASE_PORT=5432
    ports:
      - 8080:8080
      - 9090:9090
    networks:
      - backend
      - kafka
    profiles:
      - app

#  booking_service:
#    container_name: booking_service
#    build:
#      context: ./booking_service/
#    depends_on:
#      - db
#    environment:
#      - DATABASE_HOST=db-aviasales
#      - DATABASE_PORT=5432
#    ports:
#      - 8081:8080
#      - 9091:9090
#    networks:
#      - backend


networks:
  backend:
  kafka:

volumes:
  db-aviasales-data:
